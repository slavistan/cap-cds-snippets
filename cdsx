#!/usr/bin/env zsh

TAIL=${0:t}

usage() {
  printf \
"\033[1mNAME\033[0m
\t$TAIL - Extension to SAP's cds cli.

\033[1mSYNOPSIS\033[0m
\t$TAIL watch [OPTIONS]

\033[1mOPTIONS\033[0m
\t-l | --watchlist
\t\tPrint newline-sep'd list of watched files and exit.

\t--pre=<CMD>
\t\tExecutes a command prior to serving the project. Can be invoked multiple
\t\ttimes to run multiple commands in the order of their declaration. Execution
\t\tterminates if any command in the chain fails.

\t\tExample: \033[3;32m$TAIL --pre='rm ./sqlite.db' --pre='cds deploy'\033[0m will execute
\t\t\033[3;32m(rm ./sqlite.db) && (cds deploy)\033[0m prior to serving the project.

\t--post=<CMD>
\t\tExecutes a command after all services are live. Usage according to
\t\t'--pre=...' options. Can be invoked multiple times.

\t-d | --redeploy
\t\tRedeploy to database on file change. Equivalent to --pre='cds deploy'.
\t\tExecuted as the very last command when used alongside other '--pre=...'
\t\toptions.
"
  exit
}

# true iff $1 is substring of $FLAGS
isflagset() {
  echo "$FLAGS" | grep -qF "$1"
}

# prints watchlist
watch/watchlist() {
  find '.' -type f                \
    -not -path '*/\.*'            \
    -not -path '*/node_modules/*' \
    -not -name '*.db'
}

# parse cli options for watch subcommand
watch/parseopt() {
  shift
  local -a flags
  local -a precmds
  local -a postcmds
  zparseopts -a flags -- l d -pre+:=precmds -post+:=postcmds || exit 1

  # concatenate all flags to a single string FLAGS
  FLAGS=$(echo "$flags" | tr -d ' -')

  # store precmds as array PRECMDS
  PRECMDS=()
  for ((ii = 2; ii <= ${#precmds}; ii += 2)); do
    PRECMDS+=$(echo $precmds[$ii] | sed 's/^=//g')
  done

  # store postcmds as array POSTCMDS
  POSTCMDS=()
  for ((ii = 2; ii <= ${#postcmds}; ii += 2)); do
    POSTCMDS+=$(echo $postcmds[$ii] | sed 's/^=//g')
  done
}

# post-war cleanup
cleanup() {
  rm -rf "$TMPDIR"

  # make sure to kill spawned subshells and its children.
  pkill -P "$WATCHERPID" > /dev/null 2>&1
  kill "$WATCHERPID" > /dev/null 2>&1
  exit
}

case "$1" in
  help|-h|--help)
    usage
    ;;

  watch)
    watch/parseopt "$@"

    # -l | --watchlist: print watchlist end exit
    isflagset l && watch/watchlist && exit

    # -d | --pre=<cmd>: build command string to be exec'd by 'entr -s'
    #   before serving project
    entrcmd="cds serve"
    isflagset d && entrcmd="cds deploy && $entrcmd"
    for ((ii = ${#PRECMDS}; ii >= 1; ii -= 1)); do
      entrcmd="($PRECMDS[$ii]) && $entrcmd"
    done

    # --post=<cmd>: build command string to be exec'd by 'eval' after
    #   service went live
    [ ! -z "$POSTCMDS[1]" ] && evalcmd="($POSTCMDS[1])"
    for ((ii = 2; ii <= ${#POSTCMDS}; ii += 1)); do
      evalcmd="$evalcmd && ($POSTCMDS[$ii])"
    done

    # spawn a bg watcher to observe stdout of $entrcmd and trigger actions
    # when the output matches a target string. We use this to detect when
    # 'cds serve' has gone live.
    if [ ! -z "$evalcmd" ]; then
      TMPDIR=$(mktemp -d -p /tmp cdsx-fifo-XXXXXX)
      FIFO="$TMPDIR/fifo"
      mkfifo "$FIFO"
      trap cleanup 0 1 15 INT
      {
        while :; do
          grep -qF '[cds] - server listening on { url: ' "$FIFO" || break
          eval "$evalcmd"
        done
      } &
      WATCHERPID=$!
    fi
    [ -z "$FIFO" ] && sink=/dev/null || sink="$FIFO"
    watch/watchlist | entr -rs "$entrcmd" | tee "$sink"
  ;;

  *)
    usage
    ;;

esac

# TODO(feat): add --redeploy and --watchlist long opt
# TODO(feat): allow to set or augment watchlist from parameter l=.., l+=..
# TODO(fix): entr -r swallows last line of service startup output
#
#            entr -s "cds serve" shows '[ terminate ... ]' while
#            entr -rs "cds serve" does not. -r seems to absorb
#            the last line. Why?
#
#            Note that 'cds watch' adds an additional newline wrt
#            'cds serve' which is why I can trigger --post= cmds on
#            grep -F '[ terminate with ^C ]' for 'cds watch' but not for
#            'cds serve' as the final line is swallowed by entr :(
